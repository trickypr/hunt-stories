{"version":3,"sources":["../node_modules/ya-base62/index.js"],"names":[],"mappings":";AAAA,aAEA,IAAA,EAAA,iEAAA,MAAA,IAOA,EAAA,SAAA,GACA,OAAA,EAAA,IASA,EAAA,SAAA,EAAA,GAGA,IAFA,IAAA,EAAA,GAEA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,IAAA,EACA,EAAA,KAAA,MAAA,EAAA,IAGA,OAAA,GASA,EAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,WAAA,GAUA,OAPA,GADA,EAAA,GACA,GACA,EAAA,GACA,GAEA,IAaA,EAAA,SAAA,EAAA,EAAA,GAKA,IAJA,IAEA,EAFA,EAAA,EACA,EAAA,EAGA,EAAA,EAAA,IACA,EAAA,EAAA,WAAA,EAAA,GAUA,IAPA,GADA,EAAA,GACA,GACA,EAAA,GACA,GAEA,IAGA,KAAA,IAAA,GAAA,EAAA,EAAA,GAGA,OAAA,GAQA,EAAA,SAAA,GACA,OAAA,EAAA,EAAA,EAAA,EAAA,SAQA,EAAA,SAAA,GACA,GAAA,IAAA,EACA,MAAA,IAKA,IAFA,IAAA,EAAA,GAEA,EAAA,GACA,EAAA,EAAA,EAAA,IAAA,EAEA,EAAA,KAAA,MAAA,EAAA,IAGA,OAAA,GAGA,OAAA,QAAA,CACA,kBAAA,EACA,gBAAA,EACA,kBAAA,EACA,gBAAA,EACA,OAAA,EACA,OAAA","file":"ya-base62.dafcad8c.js","sourceRoot":"../src","sourcesContent":["\"use strict\";\n\nvar chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n\n/**\n * Convert an integer value to a single byte base 62 value\n * @param {int} value An integer in the [0-61] range\n * @returns {string} Single byte base 62 encoded value\n */\nvar sbValueToBase62 = function sbValueToBase62 (value) {\n    return chars[value];\n};\n\n/**\n * Convert an integer value to a multiple byte base 62 value\n * @param {int} value An integer in the [0-(62 ** length - 1)] range\n * @param {int} length The number of bytes\n * @returns {string} Multiple byte base 62 encoded value\n */\nvar mbValueToBase62 = function mbValueToBase62 (value, length) {\n    var string = '';\n\n    for (var i = 0; i < length; i++) {\n        string = chars[value % 62] + string;\n        value = Math.floor(value / 62);\n    }\n\n    return string;\n};\n\n/**\n * Convert a single byte base 62 value to an integer\n * @param {string} string String containing the single byte base 62 value\n * @param {int} position Position of the character to decode\n * @returns {int} Decoded integer\n */\nvar sbValueFromBase62 = function sbValueFromBase62 (string, position) {\n    var value = string.charCodeAt(position);\n\n    if (value < 58) {\n        value = value - 48;\n    } else if (value < 91) {\n        value = value - 29;\n    } else {\n        value = value - 87;\n    }\n\n    return value;\n};\n\n/**\n * Convert a multiple byte base 62 value to an integer\n * @param {string} string String containing the multiple byte base 62 value\n * @param {int} position Start position of the characters to decode\n * @param {int} length Number of bytes to decode\n * @returns {int} Decoded integer\n */\nvar mbValueFromBase62 = function mbValueFromBase62 (string, position, length) {\n    var value = 0,\n        i = 0,\n        charValue;\n\n    for (; i < length; i++) {\n        charValue = string.charCodeAt(position + i);\n\n        if (charValue < 58) {\n            charValue = charValue - 48;\n        } else if (charValue < 91) {\n            charValue = charValue - 29;\n        } else {\n            charValue = charValue - 87;\n        }\n\n        value += charValue * Math.pow(62, length - i - 1);\n    }\n\n    return value;\n};\n\n/**\n * Convert the entirety of a given base 62 string to an integer\n * @param {string} string String containing the base 62 value\n * @returns {int} Decoded integer\n */\nvar decode = function decode (string) {\n    return mbValueFromBase62(string, 0, string.length);\n};\n\n/**\n * Convert an integer to a base 62 value\n * @param {int} value Positive integer\n * @returns {string} Base 62 value\n */\nvar encode = function encode (value) {\n    if (value === 0) {\n        return '0';\n    }\n\n    var string = '';\n\n    while (value > 0) {\n        string = chars[value % 62] + string;\n\n        value = Math.floor(value / 62);\n    }\n\n    return string;\n};\n\nmodule.exports = {\n    mbValueFromBase62: mbValueFromBase62,\n    mbValueToBase62: mbValueToBase62,\n    sbValueFromBase62: sbValueFromBase62,\n    sbValueToBase62: sbValueToBase62,\n    decode: decode,\n    encode: encode\n};\n"]}